== PBC Basics ==

This chapter gives a high-level view of the library, and explains
various design choices and conventions.

=== Headers and Libraries ===

Programs using the PBC library should include the file `pbc.h`:

  #include <pbc.h>

and linked against the PBC library, e.g.

  $ gcc program.c -L. -lpbc

The file `pbc.h` includes `gmp.h` thus all GMP functions are available.

To catch certain bugs, first define the PBC_DEBUG symbol before including
`pbc.h`:

  #define PBC_DEBUG
  #include <pbc.h>

The program will now abort when PBC detects a statement incorrectly
mixing elements from different algebraic structures. Note these checks are
performed at runtime, so this feature should be disabled for production
builds.

=== Types ===

Since the PBC library is built on top of GMP, the GMP types
are available. PBC types are similar to GMP types.
The following example is paraphrased from an example in the GMP
manual, and shows how to declare the PBC data type +element_t+.

    element_t sum;
    struct foo { element_t x, y; };
    element_t vec[20];

The +pairing_t+ data type holds bilinear pairing
parameter information. There are other data types but for many
pairing-based cryptography applications they are only needed internally.

Examples of other data types defined by PBC are +field_t+
for rings and fields and +mpc_t+ for complex arbitrary
precision floats.

=== Function Classes ===

PBC contains several classes of functions.

* Functions involving pairings; these begin with
+pairing_+.

* Functions operating on elements of groups, rings and fields; these begin
with +element_+.

* Functions generating pairings, that is, find elliptic curves
where efficiently computable bilinear pairings exist; useful if the
bundled pairings are inadequate.

* Miscellaneous functions, such as ones controlling how random bits are
generated.

=== Conventions ===

PBC follows GMP in several respects:

* Output arguments generally precede input arguments.
* The same variable can be used as input and output in one call.
* Before a variable may be used it must be initialized exactly once.
When no longer needed it must be cleared. For efficiency, unnecessary
initializating and clearing should be avoided.
* PBC variables ending with +_t+ behave the same as
GMP variables in function calls: effectively as call-by references.
In other words, as in GMP, if a function that modifies an input variable,
that variable remains modified when control return is returned to the caller.
* Like GMP, variables automatically allocate memory when needed.
By default. +malloc()+ and friends
are called but this can be changed.
* The +element_t+ type is small (but certain other types
are not).
* PBC functions are mostly reentrant.

Recall GMP has the +mpz_t+ type for integers, +mpq_t+ for
rationals and so on.  In contrast, PBC uses the +element_t+ data type for
elements of different algebraic structures, such as elliptic curve groups,
polynomial rings and finite fields. Many functions assume the inputs come from
the same algebraic structure and trouble can arise if for example one attempts
to add a polynomial to a point on an elliptic curve.

The algebraic structure that an +element_t+ variable belongs to is specified in
an initialization call.
