<chapter>
<title>Element Functions</title>
<para>
Elements of groups, rings and fields are stored in the <type>element_t</type>
data type. Variables of this type
must be initialized before use, and should be cleared after they are no longer
needed.
</para>
<para>
The <function>element_</function> functions must be used with caution.
Just as division by zero does not make sense for integers,
some operations may not make sense for particular elements. For example,
in a ring, one cannot in general invert elements.
</para>
<para>
Another caveat is that many of these functions assume their arguments come
from the same ring, group or field. No implicit type casting is performed.
</para>
<section>
<title>Initializing Elements</title>
<para>
When an element is initialized it is associated with an algebraic structure,
such as a particular finite field or elliptic curve group.
</para>
<variablelist>
&einit;
</variablelist>
</section>
<section>
<title>Assigning Elements</title>
<variablelist>
&eassign;
</variablelist>

<para>
Now pairing->G1, pairing->G2,
pairing->GT and bilinear_map() can be used as follows.
Declare and initialize some group elements:
</para>
<programlisting>element_t x, y, z;
element_init(x, pairing->G1);
element_init(y, pairing->G2);
element_init(z, pairing->GT);
</programlisting><para>
To pick random elements of G1, G2 and compute a pairing:
</para>
<programlisting>element_random(x);
element_random(y);
bilinear_map(z, x, y, pairing);
</programlisting>
<para>
Now z = e(x, y).
</para>
<para>
To raise x by some random exponent r:
</para>
<programlisting>element_t r;
element_init(r, pairing->Zr);
element_random(r);
element_pow_fp(x, x, r);
</programlisting>
</section>
</chapter>
